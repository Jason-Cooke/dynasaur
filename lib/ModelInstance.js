// Generated by CoffeeScript 1.3.3
(function() {
  var ModelInstance, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  uuid = require('node-uuid');

  ModelInstance = (function() {

    function ModelInstance(model, item) {
      this.model = model;
      this.item = item;
      this.remove = __bind(this.remove, this);

      this.update = __bind(this.update, this);

      this.save = __bind(this.save, this);

      this.setAttributes = __bind(this.setAttributes, this);

      this.paused = true;
      this.queued_actions = [];
      this.setAttributes();
      this;

    }

    ModelInstance.prototype.setAttributes = function() {
      var attribute, _results;
      this.id = uuid.v1();
      _results = [];
      for (attribute in this.model.schema.attributes) {
        if (this.item) {
          _results.push(this[attribute] = this.item[attribute]);
        } else {
          if (typeof attribute === 'string') {
            _results.push(this[attribute] = '');
          } else if (typeof attribute === 'number') {
            _results.push(this[attribute] = 0);
          } else {
            _results.push(void 0);
          }
        }
      }
      return _results;
    };

    ModelInstance.prototype.unpause = function() {
      var action, _i, _len, _ref, _results;
      this.paused = false;
      _ref = this.queued_actions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        _results.push(action());
      }
      return _results;
    };

    ModelInstance.prototype.dump = function() {
      return console.log(this);
    };

    ModelInstance.prototype.save = function(cb) {
      var attribute, attributes,
        _this = this;
      attributes = {};
      attributes.id = this.id;
      for (attribute in this.model.schema.attributes) {
        attributes[attribute] = this[attribute];
      }
      if (this.paused) {
        return this.queued_actions.push(function() {
          console.log('Dynasaur: '.yellow, 'Saving ' + _this.model.name);
          return _this.model.table.put(attributes).save(cb);
        });
      } else {
        console.log('Dynasaur: '.yellow, 'Saving ' + this.model.name);
        return this.model.table.put(attributes).save(cb);
      }
    };

    ModelInstance.prototype.update = function(cb) {
      var attr, attrs,
        _this = this;
      attrs = [];
      for (attr in this.model.schema.attributes) {
        attrs[attr] = this[attr];
      }
      attrs.id = this.id;
      return this.model.table.put(attrs).save(function(err, data) {
        console.log(err);
        return cb(null, _this);
      });
    };

    ModelInstance.prototype.remove = function(cb) {
      return this.item.destroy(function(err) {
        console.log('DESTROYED');
        return cb(err);
      });
    };

    return ModelInstance;

  })();

  module.exports = ModelInstance;

  /* 
  old update function broken due to incomplete implementation of dynamo api
    update: (cb) =>
      #test for item prescence to prevent update on new model
      altered_attributes = []
      for attribute of @model.schema.attributes
        if @[attribute] isnt @item[attribute]
          altered_attributes.push attribute
      self = @
      console.log @item
      @item.update ->
        for altered_attribute in altered_attributes
          @put altered_attribute, self[altered_attribute]
      delete @item.Key
      delete @item.TableName
      @model.table.put(@item).save =>
        cb null, @
  */


}).call(this);
