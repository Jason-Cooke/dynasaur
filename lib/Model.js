// Generated by CoffeeScript 1.3.3
(function() {
  var Model, ModelInstance,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ModelInstance = require('./ModelInstance');

  Model = (function() {

    function Model(name, schema) {
      this.name = name;
      this.schema = schema;
      this.get = __bind(this.get, this);

      this.find = __bind(this.find, this);

      this["new"] = __bind(this["new"], this);

      this.setTable = __bind(this.setTable, this);

      this.paused = true;
      this.instances = [];
      this.queued_actions = [];
      this;

    }

    Model.prototype.setTable = function(table) {
      this.table = table;
      this.paused = false;
      this.unpause();
      return this.unpauseInstances();
    };

    Model.prototype.unpause = function() {
      var action, _i, _len, _ref, _results;
      this.paused = false;
      _ref = this.queued_actions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        action = _ref[_i];
        _results.push(action());
      }
      return _results;
    };

    Model.prototype.unpauseInstances = function() {
      var instance, _i, _len, _ref, _results;
      _ref = this.instances;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instance = _ref[_i];
        _results.push(instance.unpause());
      }
      return _results;
    };

    Model.prototype["new"] = function() {
      var instance;
      instance = new ModelInstance(this, null);
      this.instances.push(instance);
      return instance;
    };

    Model.prototype.find = function(query, cb) {
      var _this = this;
      if (this.paused) {
        return this.queued_actions.push(function() {
          return _this.table.scan(query).fetch(function(err, results) {
            var result, results_models, _i, _len;
            results_models = [];
            for (_i = 0, _len = results.length; _i < _len; _i++) {
              result = results[_i];
              result = _this.setItemAttrs(item, result);
              results_models.push(new ModelInstance(_this, result));
            }
            return cb(err, results_models);
          });
        });
      } else {
        return this.table.scan(query).fetch(function(err, results) {
          var result, results_models, _i, _len;
          results_models = [];
          for (_i = 0, _len = results.length; _i < _len; _i++) {
            result = results[_i];
            results_models.push(new ModelInstance(_this, result));
          }
          return cb(err, results_models);
        });
      }
    };

    Model.prototype.get = function(itemKey, cb) {
      var item,
        _this = this;
      if (this.paused) {
        return this.queued_actions.push(function() {
          var item;
          item = _this.table.get(itemKey);
          return item.fetch(function(err, result) {
            result = _this.setItemAttrs(item, result);
            return cb(err, new ModelInstance(_this, item));
          });
        });
      } else {
        item = this.table.get(itemKey);
        return item.fetch(function(err, result) {
          result = _this.setItemAttrs(item, result);
          return cb(err, new ModelInstance(_this, item));
        });
      }
    };

    Model.prototype.setItemAttrs = function(item, result) {
      var attr;
      for (attr in result) {
        item[attr] = result[attr];
      }
      return item;
    };

    return Model;

  })();

  module.exports = Model;

}).call(this);
